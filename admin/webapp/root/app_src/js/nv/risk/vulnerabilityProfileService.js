(function () {
  "use strict";
  angular
    .module("app.assets")
    .factory(
      "CveProfileFactory",
      function (
        $http,
        Alertify,
        $translate,
        $timeout,
        $window,
        $filter,
        Utils,
        $sanitize
      ) {
        let CveProfileFactory = {};
        CveProfileFactory.prepareGrids = (isWriteVulsProfileAuthorized) => {
          const profileColumnDef = [
            {
              headerName: "ID",
              field: "id",
              maxWidth: 80,
              minWidth: 80,
            },
            {
              headerName: $translate.instant("cveProfile.gridHeader.VULNERABILITY_FILTER"),
              cellRenderer: function (params) {
                if (params && params.data) {
                  if (params.data.name !== "_RecentVuln" && params.data.name !== "_RecentVulnWithoutFix") {
                    return $sanitize(params.data.name);
                  } else if (params.data.days) {
                    if (params.data.name === "_RecentVuln")
                      return `Vulnerabilities reported within ${params.data.days} day(s)`;
                    if (params.data.name === "_RecentVulnWithoutFix")
                      return `Vulnerabilities reported within ${params.data.days} day(s) without fix`;
                  }
                }
              },
              width: 200
            },{
              headerName: "",
              field: "name",
              hide: true
            },{
              headerName: "",
              field: "days",
              hide: true
            },{
              headerName: $translate.instant("cveProfile.gridHeader.IMAGES"),
              field: "images",
              cellRenderer: function (params) {
                if (params && params.value) {
                  return $sanitize(params.value.join(", "));
                }
              },
              filter: true,
              width: 160
            },{
              headerName: $translate.instant("cveProfile.gridHeader.DOMAINS"),
              field: "domains",
              cellRenderer: function (params) {
                if (params && params.value) {
                  return $sanitize(params.value.join(", "));
                }
              },
              filter: true,
              width: 160
            },{
              headerName: $translate.instant("cveProfile.gridHeader.COMMENT"),
              field: "comment",
              width: 160
            },{
              headerName: "",
              cellRenderer: function(params) {
                return (
                  '<div>' +
                  '       <em class="fa fa-edit fa-lg mr-sm text-action"' +
                  '         ng-click="editCveProfile()" uib-tooltip="{{\'cveProfile.EDIT\' | translate}}">' +
                  "       </em>" +
                  '       <em class="fa fa-trash fa-lg mr-sm text-action" id="remove-form-action"' +
                  '         ng-click="removeCveProfile(data)" uib-tooltip="{{\'cveProfile.REMOVE\' | translate}}">' +
                  "       </em>" +
                  "     </div>"
                );
              },
              hide: !isWriteVulsProfileAuthorized,
              maxWidth: 60,
              minWidth: 60,
            },
          ];
          let grid = {
              gridOptions4CveProfile: Utils.createGridOptions(profileColumnDef),
          };
          return grid;
        };

        CveProfileFactory.getCveProfile = () => {
          return $http.get(CVE_PROFILE);
        };

        CveProfileFactory.addCveProfile = (payload) => {
          return $http.post(CVE_PROFILE_ENTRY, payload);
        };

        CveProfileFactory.updateCveProfile = (payload, name) => {
          return $http.patch(CVE_PROFILE_ENTRY, payload, {params: {name: name}});
        };

        CveProfileFactory.deleteCveProfile = (name, id) => {
          return $http.delete(CVE_PROFILE_ENTRY, {params: {profile_name: name, entry_id: id}});
        };

        return CveProfileFactory;
      })
})();
