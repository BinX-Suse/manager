(function() {
  "use strict";
  angular
    .module("app.assets")
    .controller("VulnerabilityProfileController", VulnerabilityProfileController);

  VulnerabilityProfileController.$inject = [
    "$scope",
    "$filter",
    "$http",
    "$translate",
    "$window",
    "$timeout",
    "Utils",
    "Alertify",
    "$controller",
    "$state",
    "$sanitize",
    "$interval",
    "$mdDialog",
    "CveProfileFactory",
    "AuthorizationFactory",
    "CveFactory"
  ];
  function VulnerabilityProfileController(
    $scope,
    $filter,
    $http,
    $translate,
    $window,
    $timeout,
    Utils,
    Alertify,
    $controller,
    $state,
    $sanitize,
    $interval,
    $mdDialog,
    CveProfileFactory,
    AuthorizationFactory,
    CveFactory
  ) {
    let cveProfileEntries = [];
    let selectedProfile = [];
    $scope.gridHeight = $window.innerHeight - 180;
    angular.element($window).bind("resize", function() {
      $scope.gridHeight = $window.innerHeight - 180;
      $scope.$digest();
    });

    let getEntityName = function(count) {
      return Utils.getEntityName(
        count,
        $translate.instant("cveProfile.COUNT_POSTFIX")
      );
    };
    const found = $translate.instant("enum.FOUND");

    const renderCount = function (count) {
      $scope.count = `${count} ${getEntityName(
        count
      )}`;
    };

    $scope.matchTypes = [
      { id: "equal", name: "=" },
      {
        id: "contains",
        name: $translate.instant("admissionControl.operators.CONTAINS")
      }
    ];

    $scope.setMatchType = function (matchType) {
      $scope.advFilter.matchType = matchType;
      $scope.advFilter.matchTypes[$scope.advFilter.entityType] = matchType;
    };

    const initAdvFilter = function() {
      return {
        matchType: $scope.matchTypes[0],
        matchTypes: {
          "Vulnerability Name": $scope.matchTypes[0],
          "Reported within": $scope.matchTypes[0],
          Image: $scope.matchTypes[0],
          Domain: $scope.matchTypes[0]
        },
        entities: ["Vulnerability Name", "Reported within", "Image", "Domain"],
        entityType: "Vulnerability Name",
        vulnerabilityName: "",
        reportedWithin: "",
        imageName: "",
        domainName: "",
      };
    }

    const checkEntity = function(matchType, entities, pattern, result) {
      console.log("matchType, entities, pattern, result", matchType, entities, pattern, result);
      const patterns = pattern.split(",").map(item => item.trim());
      const theEntity = entities.find((entity) => {
        if (entity && entity.display_name) {
          if (matchType === "equal")
            return patterns.some((item) => item === entity.display_name);
          else
            return new RegExp(patterns.join("|")).test(entity.display_name);
        } else {
          if (matchType === "equal")
            return patterns.some((item) => item === entity);
          else return new RegExp(patterns.join("|")).test(entity);
        }
      });
      result = result && !!theEntity;
      return result;
    }

    const isExternalFilterPresent = function() {
      return (
        $scope.advFilter.vulnerabilityName ||
        $scope.advFilter.reportedWithin ||
        $scope.advFilter.imageName ||
        $scope.advFilter.domainName
      );
    };

    const doesExternalFilterPass = function(node) {
      if (!isExternalFilterPresent()) return true;
      else {
        let result = true;
        if ($scope.advFilter.vulnerabilityName) {
          if ($scope.advFilter.matchTypes["Vulnerability Name"].id === "equal")
            result = node.data.name.toLowerCase() === $scope.advFilter.vulnerabilityName.toLowerCase() && result;
          else result = node.data.name.toLowerCase().includes($scope.advFilter.vulnerabilityName.toLowerCase()) && result;
        }
        if ($scope.advFilter.reportedWithin) {
          result = node.data.days === parseInt($scope.advFilter.reportedWithin, 10) && result;
        }
        if ($scope.advFilter.imageName) {
          if (node.data.images.length) {
            result = checkEntity(
              $scope.advFilter.matchTypes["Image"].id,
              node.data.images,
              $scope.advFilter.imageName,
              result
            );
          } else return false;
        }
        if ($scope.advFilter.domainName) {
          if (node.data.domains.length) {
            result = checkEntity(
              $scope.advFilter.matchTypes["Domain"].id,
              node.data.domains,
              $scope.advFilter.domainName,
              result
            );
          } else return false;
        }
        return result;
      }
    };

    active();

    function active() {
      $scope.isWriteVulsProfileAuthorized = AuthorizationFactory.getDisplayFlag("write_vuls_profile");
      $scope.gridOptions4CveProfile = CveProfileFactory.prepareGrids($scope.isWriteVulsProfileAuthorized).gridOptions4CveProfile;
      $scope.gridOptions4CveProfile.isExternalFilterPresent = isExternalFilterPresent;
      $scope.gridOptions4CveProfile.doesExternalFilterPass = doesExternalFilterPass;
      $scope.gridOptions4CveProfile.onSelectionChanged = function() {
        selectedProfile = $scope.gridOptions4CveProfile.api.getSelectedRows()[0];
      };
      $scope.gridOptions4CveProfile.defaultColDef = {
        flex: 1,
        cellClass: 'cell-wrap-text',
        autoHeight: true,
        sortable: true,
        resizable: true,
      };
      $scope.gridOptions4CveProfile.onColumnResized = function(params) {
        params.api.resetRowHeights();
      };
      $scope.refresh = function() {
        CveProfileFactory.getCveProfile()
        .then((res) => {
          if (res.data.profiles.length > 0) {
            cveProfileEntries = res.data.profiles[0].entries;
            $scope.gridOptions4CveProfile.api.setRowData(cveProfileEntries);
          } else {
            cveProfileEntries = [];
            $scope.gridOptions4CveProfile.api.setRowData(cveProfileEntries);
          }
          renderCount(cveProfileEntries.length);
          $timeout(() => {
            $scope.gridOptions4CveProfile.api.sizeColumnsToFit();
          }, 200);
        })
        .catch((err) => {

        });
        CveFactory.getDomains()
          .then(res => {
            const resourceList = ["_images", "_nodes", "_containers"];
            $scope.namespaces = res.data.domains.filter(
              (domain) => !resourceList.includes(domain.name)
            ).map(domain => domain.name);
          })
          .catch(err => {
            $scope.namespaces = [];
          });
      };

      $scope.onFilterChanged = function (value) {
        $scope.gridOptions4CveProfile.api.setQuickFilter(value);
        let filteredCount = $scope.gridOptions4CveProfile.api.getModel().rootNode
          .childrenAfterFilter.length;
        $scope.count = filteredCount === cveProfileEntries.length ?
        `${cveProfileEntries.length} ${getEntityName(
          cveProfileEntries.length
        )}`:
        `${found} ${filteredCount} / ${
          cveProfileEntries.length
        } ${getEntityName(cveProfileEntries.length)}`;
      };

      $scope.refresh();
      $scope.advFilter = initAdvFilter();

      $scope.setEntity = function(entity) {
        $scope.advFilter.entityType = entity;
        $scope.advFilter.matchType = $scope.advFilter.matchTypes[entity];
      };

      const applyAdvFilter = function() {
        $scope.gridOptions4CveProfile.api.onFilterChanged();
        let filteredCount = $scope.gridOptions4CveProfile.api.getModel().rootNode
          .childrenAfterFilter.length;
        $scope.count = filteredCount === cveProfileEntries.length ?
        `${cveProfileEntries.length} ${getEntityName(
          cveProfileEntries.length
        )}`:
        `${found} ${filteredCount} / ${
          cveProfileEntries.length
        } ${getEntityName(cveProfileEntries.length)}`;
      };

      $scope.setEntityName = function() {
        $scope.entities = [];
        console.log("$scope.advFilter", $scope.advFilter);

        let symbol = entityType =>
          $scope.advFilter.matchTypes[entityType].id === "contains" ? "~" : "=";
        if ($scope.advFilter.vulnerabilityName)
          $scope.entities.push({
            id: "vul",
            name: `Vulnerability Name ${symbol("Vulnerability Name")} ${$scope.advFilter.vulnerabilityName}`
          });
        if ($scope.advFilter.reportedWithin)
          $scope.entities.push({
            id: "days",
            name: `Reported within ${symbol("Reported within")} ${$scope.advFilter.reportedWithin} day(s)`
          });
        if ($scope.advFilter.imageName)
          $scope.entities.push({
            id: "image",
            name: `Image ${symbol("Image")} ${$scope.advFilter.imageName}`
          });
        if ($scope.advFilter.domainName)
          $scope.entities.push({
            id: "domain",
            name: `Namespace ${symbol("Domain")} ${$scope.advFilter.domainName}`
          });

        applyAdvFilter();
      };

      $scope.removeEntity = entity => {
        if (entity.id === "vul") {
          $scope.advFilter.vulnerabilityName = "";
        } else if (entity.id === "days") {
          $scope.advFilter.reportedWithin = "";
        } else if (entity.id === "image") {
          $scope.advFilter.imageName = "";
        } else if (entity.id === "domain") {
          $scope.advFilter.domainName = "";
        }

        applyAdvFilter();
      };

      $scope.addCveProfile = function() {
        let success = function() {
          $mdDialog
            .show({
              controller: DialogController4AddEditCveProfile,
              controllerAs: "addEditCveProfileCtrl",
              templateUrl: "dialog.addEditCveProfile.html",
              locals: {
                cveProfile4Edit: null,
                namespaces: $scope.namespaces,
                type: "add"
              }
            })
            .then(
              function() {
                $timeout(function() {
                  $scope.refresh();
                }, 1000);
              },
              function() {}
            );
        };

        let error = function() {};

        Utils.keepAlive(success, error);
      };

      $scope.editCveProfile = function() {
        let success = function() {
          $mdDialog
            .show({
              controller: DialogController4AddEditCveProfile,
              controllerAs: "addEditCveProfileCtrl",
              templateUrl: "dialog.addEditCveProfile.html",
              locals: {
                cveProfile4Edit: selectedProfile,
                namespaces: $scope.namespaces,
                type: "edit"
              }
            })
            .then(
              function() {
                $timeout(function() {
                  $scope.refresh();
                }, 1000);
              },
              function() {}
            );
        };

        let error = function() {};

        Utils.keepAlive(success, error);
      };

      $scope.removeCveProfile = function(data) {
        let confirmBox =
          $translate.instant("cveProfile.msg.REMOVE_CFM") + $sanitize(data.id);
        Alertify.confirm(confirmBox).then(
          function toOK() {
            CveProfileFactory.deleteCveProfile("default", data.id)
              .then((res) => {
                Alertify.set({ delay: ALERTIFY_SUCCEED_DELAY });
                Alertify.success($translate.instant("cveProfile.msg.REMOVE_OK"));
                $timeout(function() {
                  $scope.refresh();
                }, 1000);
              })
              .catch((err) => {
                if (USER_TIMEOUT.indexOf(err.status) < 0) {
                  Alertify.set({ delay: ALERTIFY_ERROR_DELAY });
                  Alertify.error(
                    Utils.getAlertifyMsg(err, $translate.instant("cveProfile.msg.REMOVE_NG"), false)
                  );
                }
              });
          },
          function toCancel() {}
        );
      };
    }
  }

  DialogController4AddEditCveProfile.$inject = [
    "$scope",
    "$mdDialog",
    "$translate",
    "$timeout",
    "Alertify",
    "Utils",
    "CveProfileFactory",
    "cveProfile4Edit",
    "namespaces",
    "type"
  ];

  function DialogController4AddEditCveProfile(
    $scope,
    $mdDialog,
    $translate,
    $timeout,
    Alertify,
    Utils,
    CveProfileFactory,
    cveProfile4Edit,
    namespaces,
    type
  ) {
    let vulnerabilityFilterIndex = 0;
    $scope.singleTag = {
      value: "",
      index: -1
    };
    $scope.isShowingEditCriterion = {
      images: false,
      domains: false
    }

    const getNameAndDays =function(vulnerabilityFilterIndex) {
      switch (vulnerabilityFilterIndex) {
        case 0: return {name: $scope.cveProfile.vulnerabilityFilter, days: 0};
        case 1: return {name: "_RecentVuln", days: parseInt($scope.cveProfile.vulnerabilityFilter, 10)};
        case 2: return {name: "_RecentVulnWithoutFix", days: parseInt($scope.cveProfile.vulnerabilityFilter, 10)};
      }
    };

    const getVulnerabilityFilterTypeAndIndex = function(vulnerabilityName) {
      switch (vulnerabilityName) {
        case "_RecentVuln": return {type: $translate.instant('cveProfile.gridHeader.REPORTED_DAYS'), index: 1};
        case "_RecentVulnWithoutFix": return {type: $translate.instant('cveProfile.gridHeader.REPORTED_DAYS_WITHOUT_FIX'), index: 2};
        default: return {type: $translate.instant('cveProfile.gridHeader.VULNERABILITY'), index: 0};
      }
    };

    const initializeTagStyle = function(fieldName) {
      let allTagsElem = angular.element(`#${fieldName} ul.tag-list > li`);
      for (let i = 0; i < allTagsElem.length; i++) {
        allTagsElem[i].classList.remove("selected-tag");
        allTagsElem[i].classList.add("tag-item");
      }
    };

    const initializeSpecificTagStyle = function(insertIndex, fieldName) {
      let elem = angular.element(`#${fieldName} ul.tag-list > li`)[insertIndex];
      elem.classList.remove("selected-tag");
      elem.classList.add("tag-item");
    };

    const setFocusedTagStyle = function(focusedIndex, fieldName) {
      let tagElem = angular.element(`#${fieldName} ul.tag-list > li`)[focusedIndex];
      tagElem.classList.remove("tag-item");
      tagElem.classList.add("selected-tag");
    };

    const initialViewModel = function() {
      if ($scope.isEdit) {
        let vulnerabilityFilterTypeAndIndex = getVulnerabilityFilterTypeAndIndex(cveProfile4Edit.name);
        $scope.cveProfile = {
          id: cveProfile4Edit.id,
          vulnerabilityFilter: cveProfile4Edit.name !== "_RecentVuln" && cveProfile4Edit.name !== "_RecentVulnWithoutFix" ? cveProfile4Edit.name : cveProfile4Edit.days,
          comment: cveProfile4Edit.comment,
          images: cveProfile4Edit.images.map((image, index) => {return {name: image, index: index};}),
          domains: cveProfile4Edit.domains.map((domain, index) => {return {name: domain, index: index};})
        };
        $scope.vulnerabilityFilterType = vulnerabilityFilterTypeAndIndex.type;
        vulnerabilityFilterIndex = vulnerabilityFilterTypeAndIndex.index;
      } else {
        $scope.cveProfile = {
          vulnerabilityFilter: "",
          comment: "",
          images: [],
          domains: []
        }
        $scope.vulnerabilityFilterType = $translate.instant('cveProfile.gridHeader.VULNERABILITY');
      }
    };

    $scope.isEdit = type === "edit";
    initialViewModel();

    $scope.cancel = function() {
      $mdDialog.cancel();
    };

    $scope.loadTags4Domains = function(query) {
      return query
        ? namespaces.filter(Utils.createFilter(query))
        : [];
    };

    $scope.setVulnerabilityFilterType = function(scopeName) {
      $scope.cveProfile.vulnerabilityFilter = "";
      switch (scopeName) {
        case "vul_name" :
          $scope.vulnerabilityFilterType = $translate.instant('cveProfile.gridHeader.VULNERABILITY');
          vulnerabilityFilterIndex = 0;
          break;
        case "days" :
          $scope.vulnerabilityFilterType = $translate.instant('cveProfile.gridHeader.REPORTED_DAYS');
          vulnerabilityFilterIndex = 1;
          break;
        case "days_without_fix" :
          $scope.vulnerabilityFilterType = $translate.instant('cveProfile.gridHeader.REPORTED_DAYS_WITHOUT_FIX');
          vulnerabilityFilterIndex = 2;
          break;
      }
    };

    $scope.suppressNonNumber = function(event, item) {
      Utils.numericTextInputOnly(event);
    };

    $scope.checkDuplicated = function(fieldName) {
      let elem = angular.element("#tagEditor");
      if ($scope.cveProfile[fieldName]) {
        for (let i = 0; i < $scope.cveProfile[fieldName].length; i++) {
          if (
            $scope.singleTag.value === $scope.cveProfile[fieldName][i].name &&
            $scope.singleTag.index !== $scope.cveProfile[fieldName][i].index
          ) {
            elem[0].classList.remove("ng-valid");
            elem[0].classList.add("ng-invalid");
            $scope.isInvalidTag = true;
            return;
          }
        }
      }
      elem[0].classList.remove("ng-invalid");
      elem[0].classList.add("ng-valid");
      $scope.isInvalidTag = false;
    };


    $scope.editCriterion = function(singleTag, fieldName) {
      if (!$scope.cveProfile[fieldName])  $scope.cveProfile[fieldName] = [];
      let insertIndex = singleTag.index === -1 ? $scope.cveProfile[fieldName].length : singleTag.index;
      let insertOrReplace = singleTag.index === -1 ? 0 : 1;
      $scope.cveProfile[fieldName].splice(insertIndex, insertOrReplace, {
        name: singleTag.value,
        index: insertIndex
      });
      $scope.singleTag = {
        value: "",
        index: -1
      };
      $scope.isShowingEditCriterion[fieldName] = false;
      initializeSpecificTagStyle(insertIndex, fieldName);
    };

    $scope.tagAdding = function(tag, fieldName) {
      let insertIndex = $scope.cveProfile[fieldName].length;
      tag.index = insertIndex;
      $scope.isShowingEditCriterion[fieldName] = false;
      initializeTagStyle(fieldName);
    }

    $scope.showTagDetail = function(tag, fieldName) {
      initializeTagStyle(fieldName);
      setFocusedTagStyle(tag.index, fieldName);
      $scope.singleTag.value = tag.name;
      $scope.singleTag.index = tag.index;
      $scope.isShowingEditCriterion[fieldName] = true;
      $scope.isInvalidTag = false;
      $timeout(() => {
        let tagEditorElem = angular.element("#tagEditor");
        tagEditorElem.focus();
      }, 200);
    };

    $scope.tagRemoving = function(tag, fieldName) {
      $scope.cveProfile[fieldName].forEach(field => {
        if (tag.index < field.index) {
          field.index -= 1;
        }
      });
      $timeout(() => {
        if (!$scope.cveProfile[fieldName])  $scope.cveProfile[fieldName] = [];
        $scope.isShowingEditCriterion[fieldName] = false;
        initializeTagStyle(fieldName);
      }, 200);
    };

    const updateCveProfile = function() {
      let vulnerabilityFilter = getNameAndDays(vulnerabilityFilterIndex);
      let payload = {
        config: {
          id: $scope.cveProfile.id,
          name: vulnerabilityFilter.name,
          days: vulnerabilityFilter.days,
          comment: $scope.cveProfile.comment,
          images: $scope.cveProfile.images.map(image => image.name),
          domains: $scope.cveProfile.domains.map(domain => domain.name)
        }
      };

      CveProfileFactory.updateCveProfile(payload, "default")
        .then((res) => {
          Alertify.set({ delay: ALERTIFY_SUCCEED_DELAY });
          Alertify.success($translate.instant("cveProfile.msg.UPDATE_OK"));
          $mdDialog.hide();
        })
        .catch((err) => {
          if (USER_TIMEOUT.indexOf(err.status) < 0) {
            Alertify.set({ delay: ALERTIFY_ERROR_DELAY });
            Alertify.error(
              Utils.getAlertifyMsg(err, $translate.instant("cveProfile.msg.UPDATE_NG"), false)
            );
          }
        });
    };

    const addCveProfile = function() {
      let vulnerabilityFilter = getNameAndDays(vulnerabilityFilterIndex);
      let payload = {
        config: {
          entries: [
            {
              name: vulnerabilityFilter.name,
              days: vulnerabilityFilter.days,
              comment: $scope.cveProfile.comment,
              images: $scope.cveProfile.images.map(image => image.name),
              domains: $scope.cveProfile.domains.map(domain => domain.name)
            }
          ],
          name: "default"
        }
      };

      CveProfileFactory.addCveProfile(payload)
        .then((res) => {
          Alertify.set({ delay: ALERTIFY_SUCCEED_DELAY });
          Alertify.success($translate.instant("cveProfile.msg.ADD_OK"));
          $mdDialog.hide();
        })
        .catch((err) => {
          if (USER_TIMEOUT.indexOf(err.status) < 0) {
            Alertify.set({ delay: ALERTIFY_ERROR_DELAY });
            Alertify.error(
              Utils.getAlertifyMsg(err, $translate.instant("cveProfile.msg.ADD_NG"), false)
            );
          }
        });
      };

      $scope.addEditCveProfile = function() {
        if ($scope.isEdit) {
          updateCveProfile();
        } else {
          addCveProfile();
        }
      };
  }
})();
