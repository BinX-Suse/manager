import {
  ChangeDetectorRef,
  Component,
  ElementRef,
  Inject,
  OnInit,
  ViewChild,
} from '@angular/core';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { FormControl, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { map } from 'rxjs/operators';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { MatChipInputEvent } from '@angular/material/chips';
import { VulnerabilityProfileTableComponent } from '@routes/vulnerability-profile/vulnerability-profile-table/vulnerability-profile-table.component';
import { VulnerabilityProfileService } from '../../vulnerability-profile.service';

enum View {
  NAME = 0,
  WITH_FIX = 1,
  WITHOUT_FIX = 2,
}

@Component({
  selector: 'app-vulnerability-profile-table-dialog',
  templateUrl: './vulnerability-profile-table-dialog.component.html',
  styleUrls: ['./vulnerability-profile-table-dialog.component.scss'],
  providers: [VulnerabilityProfileService],
})
export class VulnerabilityProfileTableDialogComponent implements OnInit {
  edit!: boolean;
  view = View.NAME;
  viewText = 'Vulnerability Name';
  View = View;
  separatorKeysCodes: number[] = [ENTER, COMMA];
  namespaceCtrl = new FormControl();
  addOnBlur = true;
  filteredDomains!: Observable<string[]>;
  form!: FormGroup;
  loading = false;
  id!: number;
  @ViewChild('namespaceInput') namespaceInput!: ElementRef<HTMLInputElement>;

  constructor(
    private vulnerabilityProfileService: VulnerabilityProfileService,
    public dialogRef: MatDialogRef<VulnerabilityProfileTableComponent>,
    @Inject(MAT_DIALOG_DATA) public data,
    private cd: ChangeDetectorRef
  ) {
    this.filteredDomains = this.namespaceCtrl.valueChanges.pipe(
      map((domain: string) => {
        return domain ? this._filter(domain) : [];
      })
    );
  }

  get images() {
    return this.form.controls.images;
  }

  ngOnInit() {
    this.id = this.data?.profile?.id;
    this.edit = !!this.data?.profile?.name;
    let withFixDays = null;
    let withoutFixDays = null;
    let name = this.data?.profile?.name;
    if (name === '_RecentVulnWithoutFix') {
      withoutFixDays = this.data?.profile?.days;
    } else if (name === '_RecentVuln') {
      withFixDays = this.data?.profile?.days;
    }
    this.form = new FormGroup({
      domains: new FormControl(this.data?.profile?.domains || []),
      images: new FormControl(this.data?.profile?.images || []),
      comment: new FormControl(this.data?.profile?.comment || null),
      name: new FormControl(name),
      withFix: new FormControl(withFixDays),
      withoutFix: new FormControl(withoutFixDays),
    });
    if (name === '_RecentVulnWithoutFix') {
      this.changeView(View.WITHOUT_FIX);
    } else if (name === '_RecentVuln') {
      this.changeView((this.view = View.WITH_FIX));
    }
    this.cd.markForCheck();
  }

  changeView(num: View) {
    switch (num) {
      case View.NAME: {
        this.viewText = 'Vulnerability Name';
        this.form.controls.withFix.reset();
        this.form.controls.withoutFix.reset();
        break;
      }
      case View.WITH_FIX: {
        this.viewText = 'Reported within (Days)';
        this.form.controls.name.reset();
        this.form.controls.withoutFix.reset();
        break;
      }
      case View.WITHOUT_FIX: {
        this.viewText = 'Reported within (Days) without Fix';
        this.form.controls.name.reset();
        this.form.controls.withFix.reset();
        break;
      }
    }
    this.view = num;
  }

  selected(event: MatAutocompleteSelectedEvent): void {
    this.namespaceInput.nativeElement.value = '';
    if (this.form.controls.domains.value.includes(event.option.viewValue)) {
      return;
    }
    this.form.controls.domains.value.push(event.option.viewValue);
  }

  addNamespace(event: MatChipInputEvent): void {
    const value = (event.value || '').trim();
    if (
      this.data.domains.includes(value) &&
      !this.form.controls.domains.value.includes(value)
    ) {
      this.form.controls.domains.value.push(value);
    }
    if (event.chipInput) {
      event.chipInput.clear();
    }
    this.namespaceCtrl.setValue(null);
  }

  removeNamespace(domain: string): void {
    const chipIdx = this.form.controls.domains.value.indexOf(domain);
    if (chipIdx >= 0) {
      this.form.controls.domains.value.splice(chipIdx, 1);
    }
  }

  addImage(event: MatChipInputEvent): void {
    const input = event.input;
    const value = event.value;
    if ((value || '').trim()) {
      this.images.setValue([...this.images.value, value.trim()]);
      this.images.updateValueAndValidity();
    }
    if (input) {
      input.value = '';
    }
  }

  removeImage(image: string): void {
    const index = this.images.value.indexOf(image);

    if (index >= 0) {
      this.images.value.splice(index, 1);
      this.images.updateValueAndValidity();
    }
  }

  onNoClick(): void {
    this.dialogRef.close();
  }

  confirm() {
    this.loading = true;
    let fixType = '_RecentVulnWithoutFix';
    if (this.form.controls.withFix.value !== null) {
      fixType = '_RecentVuln';
    }
    let days = 0;
    if (this.form.controls.withFix.value) {
      days = parseInt(this.form.controls.withFix.value);
    } else if (this.form.controls.withoutFix.value) {
      days = parseInt(this.form.controls.withoutFix.value);
    }
    const config = {
      entries: [
        {
          name: this.form.controls.name.value
            ? this.form.controls.name.value
            : fixType,
          days,
          id: this.id,
          comment: this.form.controls.comment.value || '',
          images: this.form.controls.images.value,
          domains: this.form.controls.domains.value,
        },
      ],
      name: 'default',
    };
    if (this.edit) {
      this.vulnerabilityProfileService
        .updateEntry(config.entries[0], 'default')
        .subscribe({
          next: () => {
            this.dialogRef.close(true);
          },
          complete: () => (this.loading = false),
        });
    } else {
      this.vulnerabilityProfileService.addEntry(config).subscribe({
        next: () => {
          this.dialogRef.close(true);
        },
        complete: () => (this.loading = false),
      });
    }
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.data.domains
      .filter(domain => !this.form.controls.domains.value.includes(domain))
      .filter(domain => domain.toLowerCase().includes(filterValue));
  }
}
