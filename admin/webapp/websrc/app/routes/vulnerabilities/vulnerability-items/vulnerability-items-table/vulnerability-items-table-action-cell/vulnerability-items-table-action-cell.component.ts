import { Component } from '@angular/core';
import { CfgType, ErrorResponse, VulnerabilityProfile } from '@common/types';
import { ICellRendererAngularComp } from 'ag-grid-angular';
import { ICellRendererParams } from 'ag-grid-community';
import { VulnerabilitiesCsvService } from '../../../csv-generation/vulnerabilities-csv.service';
import { GlobalVariable } from '@common/variables/global.variable';
import { DatePipe } from '@angular/common';
import { VulnerabilitiesService } from '@routes/vulnerabilities/vulnerabilities.service';
import { NotificationService } from '@services/notification.service';
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'app-vulnerability-items-table-action-cell',
  templateUrl: './vulnerability-items-table-action-cell.component.html',
  styleUrls: ['./vulnerability-items-table-action-cell.component.scss'],
})
export class VulnerabilityItemsTableActionCellComponent
  implements ICellRendererAngularComp
{
  params: any;
  cfgType!: CfgType;
  isProcessingVulnerabilityAcceptance: boolean = false;

  constructor(
    private vulnerabilitiesCsvService: VulnerabilitiesCsvService,
    private vulnerabilitiesService: VulnerabilitiesService,
    private datePipe: DatePipe,
    private notificationService: NotificationService,
    private translate: TranslateService
  ) {}

  agInit(params: ICellRendererParams): void {
    this.params = params;
    this.vulnerabilitiesService.getProfileType().subscribe(cfgType => {
      this.cfgType = cfgType;
    });
  }

  downloadCsv() {
    this.vulnerabilitiesCsvService.downloadCsv(this.params.node.data);
  }

  showInfo() {
    this.params.showInfo(this.params);
  }

  acceptVulnerability() {
    this.isProcessingVulnerabilityAcceptance = true;
    const payload: VulnerabilityProfile = {
      entries: [
        {
          name: this.params.node.data.name,
          days: 0,
          comment: `Accepted by ${
            GlobalVariable.user.token.username
          } at ${this.datePipe.transform(
            new Date(),
            'MMM dd, y HH:mm:ss'
          )} from Vulnerabilities page`,
          images: [],
          domains: [],
        },
      ],
      name: 'default',
    };
    this.vulnerabilitiesService.acceptVulnerability(payload).subscribe({
      complete: () => {
        this.vulnerabilitiesService.refreshing$.next(true);
        setTimeout(() => {
          this.vulnerabilitiesService.refresh();
          this.notificationService.open(
            this.translate.instant('cveProfile.msg.ADD_OK')
          );
          this.isProcessingVulnerabilityAcceptance = false;
        }, 3000);
      },
      error: ({ error }: { error: ErrorResponse }) => {
        this.notificationService.openError(
          error,
          this.translate.instant('cveProfile.msg.ADD_NG')
        );
        this.isProcessingVulnerabilityAcceptance = false;
      },
    });
  }

  refresh(params: ICellRendererParams): boolean {
    return false;
  }
}
